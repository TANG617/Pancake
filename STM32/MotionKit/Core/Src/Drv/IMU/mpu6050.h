#ifndef PIONEER_MPU6050_H
#define PIONEER_MPU6050_H
#include "string.h"
#include "stdlib.h"
#include "math.h"
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"

#include "inv_dmpKey.h"
#include "inv_dmpMap.h"

#define min(a,b) (((a)<(b))?(a):(b))
#define max(a,b) (((a)>(b))?(a):(b))

extern const int8_t MPU6050_ORIENTATION_DEFAULT[9];
extern void (*MPU6050_Log)(const char* message);

typedef enum{
  MPU6050_ACCEPTED = 0x00,
  MPU6050_ERROR = 0x01,
  MPU6050_TRANS_FAIL = 0x02,
  MPU6050_INCORRECT = 0x03
}MPU6050_State;

typedef struct{
  void (*tap_cb)(uint8_t count, uint8_t direction);
  void (*android_orient_cb)(uint8_t orientation);
  uint16_t orient;
  uint16_t feature_mask;
  uint16_t fifo_rate;
  uint16_t packet_length;
}MPU6050_DMP;

typedef struct{
  uint8_t addr;
  uint8_t sensors;
  uint16_t gyro_fsr;
  uint8_t accel_fsr;
  uint8_t fifo_sensors;
  uint16_t max_fifo;
  uint8_t dmp_en,dmp_loaded;
  uint16_t dmp_sample_rate,sample_rate;
  uint8_t int_en,int_latched,active_low_int;
  uint8_t bypass_en;
  uint16_t lpf;
  uint8_t lp_accel_mode,accel_half;
  uint8_t clock_source;
  MPU6050_DMP* dmp;//TODO: init
}MPU6050;

typedef enum {
    MPU6050_FILTER_256HZ_NOLPF2 = 0,
    MPU6050_FILTER_188HZ,
    MPU6050_FILTER_98HZ,
    MPU6050_FILTER_42HZ,
    MPU6050_FILTER_20HZ,
    MPU6050_FILTER_10HZ,
    MPU6050_FILTER_5HZ,
    MPU6050_FILTER_2100HZ_NOLPF,
    NUM_FILTER
}MPU6050_LPF;

typedef enum {
    MPU6050_FSR_250DPS = 0,
    MPU6050_FSR_500DPS,
    MPU6050_FSR_1000DPS,
    MPU6050_FSR_2000DPS,
    NUM_GYRO_FSR
}MPU6050_GYRO_FSR;

typedef enum {
    MPU6050_FSR_2G = 0,
    MPU6050_FSR_4G,
    MPU6050_FSR_8G,
    MPU6050_FSR_16G,
    NUM_ACCEL_FSR
}MPU6050_ACCEL_FSR;

typedef enum {
    MPU6050_CLK_INTERNAL = 0,
    MPU6050_CLK_PLL,
    NUM_CLK
}MPU6050_CLOCK;

typedef enum {
    MPU6050_LPA_1_25HZ,
    MPU6050_LPA_5HZ,
    MPU6050_LPA_20HZ,
    MPU6050_LPA_40HZ,
    NUM_ACCEL_RATE
}MPU6050_LP_ACCEL_RATE;


#define MPU6050_I2C_ADDR        (0x68)
#define MPU6050_REG_NUMBER      (118)
#define MPU6050_TEMP_OFFSET     (36.53f)
#define MPU6050_TEMP_SENS       (340.0f)
#define MPU6050_DEFAULT_HZ      (100)
#define MPU6050_BANK_SIZE       (256)
//#define MPU6050_DISABLE_Q14

//MPU6050-Register Table
#define MPU6050_REG_WHO_AM_I    (0x75)
#define MPU6050_REG_RATE_DIV    (0x19)
#define MPU6050_REG_LPF         (0x1A)
#define MPU6050_REG_PRODUCT_ID  (0x0C)
#define MPU6050_REG_USER_CTRL   (0x6A)
#define MPU6050_REG_FIFO_EN     (0x23)
#define MPU6050_REG_GYRO_CFG    (0x1B)
#define MPU6050_REG_ACCEL_CFG   (0x1C)
#define MPU6050_REG_MOTION_THR  (0x1F)
#define MPU6050_REG_MOTION_DUR  (0x20)
#define MPU6050_REG_FIFO_COUNT  (0x72)
#define MPU6050_REG_FIFO_RW     (0x74)
#define MPU6050_REG_RAW_GYRO    (0x43)
#define MPU6050_REG_RAW_ACCEL   (0x3B)
#define MPU6050_REG_RAW_TEMP    (0x41)
#define MPU6050_REG_INT_EN      (0x38)
#define MPU6050_REG_DMP_INT_ST  (0x39)
#define MPU6050_REG_INT_ST      (0x3A)
#define MPU6050_REG_PWR_MGMT1   (0x6B)
#define MPU6050_REG_PWR_MGMT2   (0x6C)
#define MPU6050_REG_INT_PIN_CFG (0x37)
#define MPU6050_REG_MEM_RW      (0x6F)
#define MPU6050_REG_ACCEL_OFFS  (0x06)
#define MPU6050_REG_I2C_MASTER  (0x24)
#define MPU6050_REG_BANK_SEL    (0x6D)
#define MPU6050_REG_MEM_START   (0x6E)
#define MPU6050_REG_PRGM_START  (0x70)

#define MPU6050_SENS_GYRO_X     (0x40)
#define MPU6050_SENS_GYRO_Y     (0x20)
#define MPU6050_SENS_GYRO_Z     (0x10)
#define MPU6050_SENS_GYRO_ALL   (MPU6050_SENS_GYRO_X|MPU6050_SENS_GYRO_Y|MPU6050_SENS_GYRO_Z)
#define MPU6050_SENS_ACCEL      (0x08)
#define MPU6050_SENS_COMPASS    (0x01)

#define MPU6050_BIT_I2C_MST_VDDIO (0x80)
#define MPU6050_BIT_FIFO_EN       (0x40)
#define MPU6050_BIT_DMP_EN        (0x80)
#define MPU6050_BIT_FIFO_RST      (0x04)
#define MPU6050_BIT_DMP_RST       (0x08)
#define MPU6050_BIT_FIFO_OVERFLOW (0x10)
#define MPU6050_BIT_DATA_RDY_EN   (0x01)
#define MPU6050_BIT_DMP_INT_EN    (0x02)
#define MPU6050_BIT_MOT_INT_EN    (0x40)
#define MPU6050_BIT_FSR           (0x18)
#define MPU6050_BIT_LPF           (0x07)
#define MPU6050_BIT_HPF           (0x07)
#define MPU6050_BIT_CLOCK         (0x07)
#define MPU6050_BIT_FIFO_SIZE1024 (0x40)
#define MPU6050_BIT_FIFO_SIZE2048 (0x80)
#define MPU6050_BIT_FIFO_SIZE4096 (0xC0)
#define MPU6050_BIT_RESET         (0x80)
#define MPU6050_BIT_SLEEP         (0x40)
#define MPU6050_BIT_S0_DELAY_EN   (0x01)
#define MPU6050_BIT_S1_DELAY_EN   (0x02)
#define MPU6050_BIT_S2_DELAY_EN   (0x04)
#define MPU6050_BIT_SLAVE_LENGTH  (0x0F)
#define MPU6050_BIT_SLAVE_BYTE_SW (0x40)
#define MPU6050_BIT_SLAVE_GROUP   (0x10)
#define MPU6050_BIT_SLAVE_EN      (0x80)
#define MPU6050_BIT_I2C_READ      (0x80)
#define MPU6050_BIT_I2C_MST_DLY   (0x1F)
#define MPU6050_BIT_AUX_IF_EN     (0x20)
#define MPU6050_BIT_ACTL          (0x80)
#define MPU6050_BIT_LATCH_EN      (0x20)
#define MPU6050_BIT_ANY_RD_CLR    (0x10)
#define MPU6050_BIT_BYPASS_EN     (0x02)
#define MPU6050_BITS_WOM_EN       (0xC0)
#define MPU6050_BIT_LPA_CYCLE     (0x20)
#define MPU6050_BIT_STBY_XA       (0x20)
#define MPU6050_BIT_STBY_YA       (0x10)
#define MPU6050_BIT_STBY_ZA       (0x08)
#define MPU6050_BIT_STBY_XG       (0x04)
#define MPU6050_BIT_STBY_YG       (0x02)
#define MPU6050_BIT_STBY_ZG       (0x01)
#define MPU6050_BIT_STBY_XYZA     (MPU6050_BIT_STBY_XA | MPU6050_BIT_STBY_YA | MPU6050_BIT_STBY_ZA)
#define MPU6050_BIT_STBY_XYZG     (MPU6050_BIT_STBY_XG | MPU6050_BIT_STBY_YG | MPU6050_BIT_STBY_ZG)

//
#define MPU6050_DMP_TAP_X                   (0x01)
#define MPU6050_DMP_TAP_Y                   (0x02)
#define MPU6050_DMP_TAP_Z                   (0x04)
#define MPU6050_DMP_TAP_XYZ                 (0x07)

#define MPU6050_DMP_INT_GESTURE             (0x01)
#define MPU6050_DMP_INT_CONTINUOUS          (0x02)

#define MPU6050_DMP_FEATURE_TAP             (0x001)
#define MPU6050_DMP_FEATURE_ANDROID_ORIENT  (0x002)
#define MPU6050_DMP_FEATURE_LP_QUAT         (0x004)
#define MPU6050_DMP_FEATURE_PEDOMETER       (0x008)
#define MPU6050_DMP_FEATURE_6X_LP_QUAT      (0x010)
#define MPU6050_DMP_FEATURE_GYRO_CAL        (0x020)
#define MPU6050_DMP_FEATURE_SEND_RAW_ACCEL  (0x040)
#define MPU6050_DMP_FEATURE_SEND_RAW_GYRO   (0x080)
#define MPU6050_DMP_FEATURE_SEND_CAL_GYRO   (0x100)

#define MPU6050_DMP_SENSE_WXYZ_QUAT         (0x100)
#define Quaternion30 1073741824.0f

#define DMP_CODE_SIZE           (3062)

//Self Definable Tools
HAL_StatusTypeDef MPU6050_Write(uint8_t addr,uint8_t reg,uint8_t* data,uint16_t size);
HAL_StatusTypeDef MPU6050_Read(uint8_t addr,uint8_t reg,uint8_t* data,uint16_t size);
MPU6050_State MPU6050_Init(MPU6050* target,MPU6050_DMP* dmp);
MPU6050_State MPU6050_Calibrate(MPU6050* target,uint8_t load_gyro,uint8_t load_accel);
void MPU6050_SetLog(void (*func)(const char* message));

//Configuration APIs
MPU6050_State MPU6050_SetSensors(MPU6050* target,uint8_t sensors);
MPU6050_State MPU6050_SetBypassMode(MPU6050* target,uint8_t enable);
MPU6050_State MPU6050_SetIntEnable(MPU6050* target,uint8_t enable);
MPU6050_State MPU6050_SetIntLevel(MPU6050* target,uint8_t active_low);
MPU6050_State MPU6050_SetIntLatched(MPU6050* target,uint8_t enable);
MPU6050_State MPU6050_SetLpAccelMode(MPU6050* target,uint8_t rate);
MPU6050_State MPU6050_SetStateDMP(MPU6050* target,uint8_t enable);
MPU6050_State MPU6050_GetStateDMP(MPU6050* target,uint8_t* enable);
MPU6050_State MPU6050_SetLPF(MPU6050* target,uint16_t lpf);
MPU6050_State MPU6050_GetLPF(MPU6050* target,uint16_t* lpf);
MPU6050_State MPU6050_SetSampleRate(MPU6050* target,uint16_t rate);
MPU6050_State MPU6050_GetSampleRate(MPU6050* target,uint16_t* rate);
MPU6050_State MPU6050_SetConfigFIFO(MPU6050*target, uint8_t sensor);
MPU6050_State MPU6050_GetConfigFIFO(MPU6050* target,uint8_t* sensor);
MPU6050_State MPU6050_SetGyroFSR(MPU6050* target,uint16_t fsr);
MPU6050_State MPU6050_GetGyroFSR(MPU6050* target,uint16_t* fsr);
MPU6050_State MPU6050_SetAccelFSR(MPU6050* target,uint8_t fsr);
MPU6050_State MPU6050_GetAccelFSR(MPU6050* target,uint8_t* fsr);
MPU6050_State MPU6050_CalcGyroSens(MPU6050* target,float* scale);
MPU6050_State MPU6050_CalcAccelSens(MPU6050* target,float* scale);

//Data Operate Functions
MPU6050_State MPU6050_GetRawGyro(MPU6050* target,int16_t* data);
MPU6050_State MPU6050_GetRawAccel(MPU6050* target,int16_t* data);
MPU6050_State MPU6050_GetRawTemp(MPU6050* target,int16_t* data);
MPU6050_State MPU6050_CalculateTemp(MPU6050* target,float* temp);
MPU6050_State MPU6050_ReadFIFO(MPU6050* target,int16_t* gyro,int16_t* accel,uint8_t* sensors,uint8_t* more);
MPU6050_State MPU6050_StreamFIFO(MPU6050* target, uint16_t length,uint8_t* data,uint8_t* more);
MPU6050_State MPU6050_ResetFIFO(MPU6050* target);
MPU6050_State MPU6050_ReadWriteMem(MPU6050* target, uint16_t mem_addr,uint16_t length,uint8_t* data,uint8_t read);
MPU6050_State MPU6050_ProgramDMP(MPU6050* target,uint8_t* firmware,uint16_t length,uint16_t start_addr,uint16_t sample_rate);
MPU6050_State MPU6050_ReadRegister(MPU6050* target,uint8_t reg,uint8_t* data);
uint8_t MPU6050_RegHealthyCheck(MPU6050* target);
MPU6050_State MPU6050_GetIntState(MPU6050* target, uint16_t* status);
uint16_t MPU6050_Row2Scale(const int8_t* row);
uint16_t MPU6050_Matrix2Scalar(const int8_t* mtx);

//Self Test Functions
MPU6050_State MPU6050_SelfTest(MPU6050* target,int32_t* gyro,int32_t* accel,uint8_t* result);
MPU6050_State MPU6050_GetChipBiases(MPU6050* target,int32_t* gyro,int32_t* accel,uint8_t hw_test);
MPU6050_State MPU6050_GetAccelShift(MPU6050* target,float* st_shift);
MPU6050_State MPU6050_GyroTest(MPU6050* target,int32_t* bias_regular,int32_t* bias_st,uint8_t* result);
MPU6050_State MPU6050_AccelTest(MPU6050* target,int32_t* bias_regular,int32_t* bias_st,uint8_t* result);

//DMP Main Functions
MPU6050_State MPU6050_DMP_Init(MPU6050* target,MPU6050_DMP* dmp,uint8_t* error_step);
MPU6050_State MPU6050_DMP_ReadFIFO(MPU6050* target,int16_t* gyro,int16_t* accel,int32_t* quaternion,uint16_t* sensors,uint8_t* more);
MPU6050_State MPU6050_DMP_DecodeGesture(MPU6050* target,const uint8_t* gesture);
MPU6050_State MPU6050_DMP_Calculate(MPU6050* target,float* pitch,float* roll,float* yaw,int16_t* gyro_raw,int16_t* accel_raw);

//Setup Functions
MPU6050_State MPU6050_DMP_LoadFirmware(MPU6050* target);
MPU6050_State MPU6050_DMP_SetRateFIFO(MPU6050* target,uint16_t rate);
MPU6050_State MPU6050_DMP_GetRateFIFO(MPU6050* target,uint16_t* rate);
MPU6050_State MPU6050_DMP_SetFeature(MPU6050* target,uint16_t mask);
MPU6050_State MPU6050_DMP_GetFeature(MPU6050* target,uint16_t* mask);
MPU6050_State MPU6050_DMP_SetIntMode(MPU6050* target,uint8_t mode);
MPU6050_State MPU6050_DMP_SetOrientation(MPU6050* target,uint16_t orient);
MPU6050_State MPU6050_DMP_GyroCalibrate(MPU6050* target,uint8_t enable);
MPU6050_State MPU6050_DMP_SetGyroBias(MPU6050* target,const int32_t* bias);
MPU6050_State MPU6050_DMP_SetAccelBias(MPU6050* target,const int32_t* bias);

//Tap Functions
MPU6050_State MPU6050_DMP_SetTapThresh(MPU6050* target,uint8_t axis,uint16_t thresh);
MPU6050_State MPU6050_DMP_SetTapAxes(MPU6050* target,uint8_t axis);
MPU6050_State MPU6050_DMP_SetTapCount(MPU6050* target,uint8_t min_taps);
MPU6050_State MPU6050_DMP_SetTapTime(MPU6050* target,uint16_t time);
MPU6050_State MPU6050_DMP_SetTapTimeMulti(MPU6050* target,uint16_t time);
MPU6050_State MPU6050_DMP_SetShakeRejectThresh(MPU6050* target,int32_t sf,uint16_t thresh);
MPU6050_State MPU6050_DMP_SetShakeRejectTime(MPU6050* target,uint16_t time);
MPU6050_State MPU6050_DMP_SetShakeRejectTimeout(MPU6050* target,uint16_t time);

//Quaternions Functions
MPU6050_State MPU6050_DMP_EnableQuaternions3(MPU6050* target,uint8_t enable);
MPU6050_State MPU6050_DMP_EnableQuaternions6(MPU6050* target,uint8_t enable);

//Pedometer Functions
MPU6050_State MPU6050_DMP_GetStep(MPU6050* target,uint32_t* count);
MPU6050_State MPU6050_DMP_SetStep(MPU6050* target,uint32_t count);
MPU6050_State MPU6050_DMP_GetWalkTime(MPU6050* target,uint32_t* time);
MPU6050_State MPU6050_DMP_SetWalkTime(MPU6050* target,uint32_t time);

//Callback Setters
MPU6050_State MPU6050_DMP_SetOrientCallback(MPU6050* target,void (*func)(uint8_t));
MPU6050_State MPU6050_DMP_SetTapCallback(MPU6050* target,void (*func)(uint8_t,uint8_t));

#define DMP_CODE_SIZE           (3062)

static uint8_t dmp_memory[DMP_CODE_SIZE]={
        /* bank # 0 */
        0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x65, 0x00, 0x54, 0xff, 0xef, 0x00, 0x00, 0xfa, 0x80, 0x00, 0x0b, 0x12, 0x82, 0x00, 0x01,
        0x03, 0x0c, 0x30, 0xc3, 0x0e, 0x8c, 0x8c, 0xe9, 0x14, 0xd5, 0x40, 0x02, 0x13, 0x71, 0x0f, 0x8e,
        0x38, 0x83, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83, 0x25, 0x8e, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83,
        0xff, 0xff, 0xff, 0xff, 0x0f, 0xfe, 0xa9, 0xd6, 0x24, 0x00, 0x04, 0x00, 0x1a, 0x82, 0x79, 0xa1,
        0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x83, 0x6f, 0xa2,
        0x00, 0x3e, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xca, 0xe3, 0x09, 0x3e, 0x80, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
        0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x6e, 0x00, 0x00, 0x06, 0x92, 0x0a, 0x16, 0xc0, 0xdf,
        0xff, 0xff, 0x02, 0x56, 0xfd, 0x8c, 0xd3, 0x77, 0xff, 0xe1, 0xc4, 0x96, 0xe0, 0xc5, 0xbe, 0xaa,
        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2b, 0x00, 0x00, 0x16, 0x57, 0x00, 0x00, 0x03, 0x59,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xfa, 0x00, 0x02, 0x6c, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0xff, 0xdf, 0xeb, 0x00, 0x3e, 0xb3, 0xb6, 0x00, 0x0d, 0x22, 0x78, 0x00, 0x00, 0x2f, 0x3c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0xb5, 0x00, 0x00, 0x39, 0xa2, 0x00, 0x00, 0xb3, 0x65,
        0xd9, 0x0e, 0x9f, 0xc9, 0x1d, 0xcf, 0x4c, 0x34, 0x30, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
        0x3b, 0xb6, 0x7a, 0xe8, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* bank # 1 */
        0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfa, 0x92, 0x10, 0x00, 0x22, 0x5e, 0x00, 0x0d, 0x22, 0x9f,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0x63, 0xd4, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x04, 0xd6, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x72, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x64, 0x00, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x00, 0x32, 0xf8, 0x98, 0x00, 0x00, 0xff, 0x65, 0x00, 0x00, 0x83, 0x0f, 0x00, 0x00,
        0xff, 0x9b, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xb2, 0x6a, 0x00, 0x02, 0x00, 0x00,
        0x00, 0x01, 0xfb, 0x83, 0x00, 0x68, 0x00, 0x00, 0x00, 0xd9, 0xfc, 0x00, 0x7c, 0xf1, 0xff, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x03, 0xe8, 0x00, 0x64, 0x00, 0x28,
        0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
        0x00, 0x00, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 0x00, 0x10, 0x00,
        /* bank # 2 */
        0x00, 0x28, 0x00, 0x00, 0xff, 0xff, 0x45, 0x81, 0xff, 0xff, 0xfa, 0x72, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x05, 0x00, 0x05, 0xba, 0xc6, 0x00, 0x47, 0x78, 0xa2,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x25, 0x4d, 0x00, 0x2f, 0x70, 0x6d, 0x00, 0x00, 0x05, 0xae, 0x00, 0x0c, 0x02, 0xd0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e,
        0x00, 0x00, 0x0a, 0xc7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xff, 0x9c,
        0x00, 0x00, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64,
        0xff, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* bank # 3 */
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x24, 0x26, 0xd3,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x96, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0c, 0x0a, 0x4e, 0x68, 0xcd, 0xcf, 0x77, 0x09, 0x50, 0x16, 0x67, 0x59, 0xc6, 0x19, 0xce, 0x82,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xd7, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x93, 0x8f, 0x9d, 0x1e, 0x1b, 0x1c, 0x19,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x18, 0x85, 0x00, 0x00, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x67, 0x7d, 0xdf, 0x7e, 0x72, 0x90, 0x2e, 0x55, 0x4c, 0xf6, 0xe6, 0x88,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        /* bank # 4 */
        0xd8, 0xdc, 0xb4, 0xb8, 0xb0, 0xd8, 0xb9, 0xab, 0xf3, 0xf8, 0xfa, 0xb3, 0xb7, 0xbb, 0x8e, 0x9e,
        0xae, 0xf1, 0x32, 0xf5, 0x1b, 0xf1, 0xb4, 0xb8, 0xb0, 0x80, 0x97, 0xf1, 0xa9, 0xdf, 0xdf, 0xdf,
        0xaa, 0xdf, 0xdf, 0xdf, 0xf2, 0xaa, 0xc5, 0xcd, 0xc7, 0xa9, 0x0c, 0xc9, 0x2c, 0x97, 0xf1, 0xa9,
        0x89, 0x26, 0x46, 0x66, 0xb2, 0x89, 0x99, 0xa9, 0x2d, 0x55, 0x7d, 0xb0, 0xb0, 0x8a, 0xa8, 0x96,
        0x36, 0x56, 0x76, 0xf1, 0xba, 0xa3, 0xb4, 0xb2, 0x80, 0xc0, 0xb8, 0xa8, 0x97, 0x11, 0xb2, 0x83,
        0x98, 0xba, 0xa3, 0xf0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xb2, 0xb9, 0xb4, 0x98, 0x83, 0xf1,
        0xa3, 0x29, 0x55, 0x7d, 0xba, 0xb5, 0xb1, 0xa3, 0x83, 0x93, 0xf0, 0x00, 0x28, 0x50, 0xf5, 0xb2,
        0xb6, 0xaa, 0x83, 0x93, 0x28, 0x54, 0x7c, 0xf1, 0xb9, 0xa3, 0x82, 0x93, 0x61, 0xba, 0xa2, 0xda,
        0xde, 0xdf, 0xdb, 0x81, 0x9a, 0xb9, 0xae, 0xf5, 0x60, 0x68, 0x70, 0xf1, 0xda, 0xba, 0xa2, 0xdf,
        0xd9, 0xba, 0xa2, 0xfa, 0xb9, 0xa3, 0x82, 0x92, 0xdb, 0x31, 0xba, 0xa2, 0xd9, 0xba, 0xa2, 0xf8,
        0xdf, 0x85, 0xa4, 0xd0, 0xc1, 0xbb, 0xad, 0x83, 0xc2, 0xc5, 0xc7, 0xb8, 0xa2, 0xdf, 0xdf, 0xdf,
        0xba, 0xa0, 0xdf, 0xdf, 0xdf, 0xd8, 0xd8, 0xf1, 0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35,
        0x5d, 0xb2, 0xb6, 0xba, 0xaf, 0x8c, 0x96, 0x19, 0x8f, 0x9f, 0xa7, 0x0e, 0x16, 0x1e, 0xb4, 0x9a,
        0xb8, 0xaa, 0x87, 0x2c, 0x54, 0x7c, 0xba, 0xa4, 0xb0, 0x8a, 0xb6, 0x91, 0x32, 0x56, 0x76, 0xb2,
        0x84, 0x94, 0xa4, 0xc8, 0x08, 0xcd, 0xd8, 0xb8, 0xb4, 0xb0, 0xf1, 0x99, 0x82, 0xa8, 0x2d, 0x55,
        0x7d, 0x98, 0xa8, 0x0e, 0x16, 0x1e, 0xa2, 0x2c, 0x54, 0x7c, 0x92, 0xa4, 0xf0, 0x2c, 0x50, 0x78,
        /* bank # 5 */
        0xf1, 0x84, 0xa8, 0x98, 0xc4, 0xcd, 0xfc, 0xd8, 0x0d, 0xdb, 0xa8, 0xfc, 0x2d, 0xf3, 0xd9, 0xba,
        0xa6, 0xf8, 0xda, 0xba, 0xa6, 0xde, 0xd8, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xf3, 0xc8,
        0x41, 0xda, 0xa6, 0xc8, 0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0x82, 0xa8, 0x92, 0xf5, 0x2c, 0x54, 0x88,
        0x98, 0xf1, 0x35, 0xd9, 0xf4, 0x18, 0xd8, 0xf1, 0xa2, 0xd0, 0xf8, 0xf9, 0xa8, 0x84, 0xd9, 0xc7,
        0xdf, 0xf8, 0xf8, 0x83, 0xc5, 0xda, 0xdf, 0x69, 0xdf, 0x83, 0xc1, 0xd8, 0xf4, 0x01, 0x14, 0xf1,
        0xa8, 0x82, 0x4e, 0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x28, 0x97, 0x88, 0xf1,
        0x09, 0xf4, 0x1c, 0x1c, 0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x29,
        0xf4, 0x0d, 0xd8, 0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc2, 0x03, 0xd8, 0xde, 0xdf, 0x1a,
        0xd8, 0xf1, 0xa2, 0xfa, 0xf9, 0xa8, 0x84, 0x98, 0xd9, 0xc7, 0xdf, 0xf8, 0xf8, 0xf8, 0x83, 0xc7,
        0xda, 0xdf, 0x69, 0xdf, 0xf8, 0x83, 0xc3, 0xd8, 0xf4, 0x01, 0x14, 0xf1, 0x98, 0xa8, 0x82, 0x2e,
        0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x50, 0x97, 0x88, 0xf1, 0x09, 0xf4, 0x1c,
        0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf8, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x49, 0xf4, 0x0d, 0xd8,
        0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc4, 0x03, 0xd8, 0xde, 0xdf, 0xd8, 0xf1, 0xad, 0x88,
        0x98, 0xcc, 0xa8, 0x09, 0xf9, 0xd9, 0x82, 0x92, 0xa8, 0xf5, 0x7c, 0xf1, 0x88, 0x3a, 0xcf, 0x94,
        0x4a, 0x6e, 0x98, 0xdb, 0x69, 0x31, 0xda, 0xad, 0xf2, 0xde, 0xf9, 0xd8, 0x87, 0x95, 0xa8, 0xf2,
        0x21, 0xd1, 0xda, 0xa5, 0xf9, 0xf4, 0x17, 0xd9, 0xf1, 0xae, 0x8e, 0xd0, 0xc0, 0xc3, 0xae, 0x82,
        /* bank # 6 */
        0xc6, 0x84, 0xc3, 0xa8, 0x85, 0x95, 0xc8, 0xa5, 0x88, 0xf2, 0xc0, 0xf1, 0xf4, 0x01, 0x0e, 0xf1,
        0x8e, 0x9e, 0xa8, 0xc6, 0x3e, 0x56, 0xf5, 0x54, 0xf1, 0x88, 0x72, 0xf4, 0x01, 0x15, 0xf1, 0x98,
        0x45, 0x85, 0x6e, 0xf5, 0x8e, 0x9e, 0x04, 0x88, 0xf1, 0x42, 0x98, 0x5a, 0x8e, 0x9e, 0x06, 0x88,
        0x69, 0xf4, 0x01, 0x1c, 0xf1, 0x98, 0x1e, 0x11, 0x08, 0xd0, 0xf5, 0x04, 0xf1, 0x1e, 0x97, 0x02,
        0x02, 0x98, 0x36, 0x25, 0xdb, 0xf9, 0xd9, 0x85, 0xa5, 0xf3, 0xc1, 0xda, 0x85, 0xa5, 0xf3, 0xdf,
        0xd8, 0x85, 0x95, 0xa8, 0xf3, 0x09, 0xda, 0xa5, 0xfa, 0xd8, 0x82, 0x92, 0xa8, 0xf5, 0x78, 0xf1,
        0x88, 0x1a, 0x84, 0x9f, 0x26, 0x88, 0x98, 0x21, 0xda, 0xf4, 0x1d, 0xf3, 0xd8, 0x87, 0x9f, 0x39,
        0xd1, 0xaf, 0xd9, 0xdf, 0xdf, 0xfb, 0xf9, 0xf4, 0x0c, 0xf3, 0xd8, 0xfa, 0xd0, 0xf8, 0xda, 0xf9,
        0xf9, 0xd0, 0xdf, 0xd9, 0xf9, 0xd8, 0xf4, 0x0b, 0xd8, 0xf3, 0x87, 0x9f, 0x39, 0xd1, 0xaf, 0xd9,
        0xdf, 0xdf, 0xf4, 0x1d, 0xf3, 0xd8, 0xfa, 0xfc, 0xa8, 0x69, 0xf9, 0xf9, 0xaf, 0xd0, 0xda, 0xde,
        0xfa, 0xd9, 0xf8, 0x8f, 0x9f, 0xa8, 0xf1, 0xcc, 0xf3, 0x98, 0xdb, 0x45, 0xd9, 0xaf, 0xdf, 0xd0,
        0xf8, 0xd8, 0xf1, 0x8f, 0x9f, 0xa8, 0xca, 0xf3, 0x88, 0x09, 0xda, 0xaf, 0x8f, 0xcb, 0xf8, 0xd8,
        0xf2, 0xad, 0x97, 0x8d, 0x0c, 0xd9, 0xa5, 0xdf, 0xf9, 0xba, 0xa6, 0xf3, 0xfa, 0xf4, 0x12, 0xf2,
        0xd8, 0x95, 0x0d, 0xd1, 0xd9, 0xba, 0xa6, 0xf3, 0xfa, 0xda, 0xa5, 0xf2, 0xc1, 0xba, 0xa6, 0xf3,
        0xdf, 0xd8, 0xf1, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xca, 0xf3, 0x49, 0xda, 0xa6, 0xcb,
        0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0xd8, 0xad, 0x84, 0xf2, 0xc0, 0xdf, 0xf1, 0x8f, 0xcb, 0xc3, 0xa8,
        /* bank # 7 */
        0xb2, 0xb6, 0x86, 0x96, 0xc8, 0xc1, 0xcb, 0xc3, 0xf3, 0xb0, 0xb4, 0x88, 0x98, 0xa8, 0x21, 0xdb,
        0x71, 0x8d, 0x9d, 0x71, 0x85, 0x95, 0x21, 0xd9, 0xad, 0xf2, 0xfa, 0xd8, 0x85, 0x97, 0xa8, 0x28,
        0xd9, 0xf4, 0x08, 0xd8, 0xf2, 0x8d, 0x29, 0xda, 0xf4, 0x05, 0xd9, 0xf2, 0x85, 0xa4, 0xc2, 0xf2,
        0xd8, 0xa8, 0x8d, 0x94, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xf2, 0xd8, 0x87, 0x21, 0xd8, 0xf4, 0x0a,
        0xd8, 0xf2, 0x84, 0x98, 0xa8, 0xc8, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xd8, 0xf3, 0xa4, 0xc8, 0xbb,
        0xaf, 0xd0, 0xf2, 0xde, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd8, 0xf1, 0xb8, 0xf6,
        0xb5, 0xb9, 0xb0, 0x8a, 0x95, 0xa3, 0xde, 0x3c, 0xa3, 0xd9, 0xf8, 0xd8, 0x5c, 0xa3, 0xd9, 0xf8,
        0xd8, 0x7c, 0xa3, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa5, 0xd9, 0xdf, 0xda, 0xfa, 0xd8, 0xb1,
        0x85, 0x30, 0xf7, 0xd9, 0xde, 0xd8, 0xf8, 0x30, 0xad, 0xda, 0xde, 0xd8, 0xf2, 0xb4, 0x8c, 0x99,
        0xa3, 0x2d, 0x55, 0x7d, 0xa0, 0x83, 0xdf, 0xdf, 0xdf, 0xb5, 0x91, 0xa0, 0xf6, 0x29, 0xd9, 0xfb,
        0xd8, 0xa0, 0xfc, 0x29, 0xd9, 0xfa, 0xd8, 0xa0, 0xd0, 0x51, 0xd9, 0xf8, 0xd8, 0xfc, 0x51, 0xd9,
        0xf9, 0xd8, 0x79, 0xd9, 0xfb, 0xd8, 0xa0, 0xd0, 0xfc, 0x79, 0xd9, 0xfa, 0xd8, 0xa1, 0xf9, 0xf9,
        0xf9, 0xf9, 0xf9, 0xa0, 0xda, 0xdf, 0xdf, 0xdf, 0xd8, 0xa1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xac,
        0xde, 0xf8, 0xad, 0xde, 0x83, 0x93, 0xac, 0x2c, 0x54, 0x7c, 0xf1, 0xa8, 0xdf, 0xdf, 0xdf, 0xf6,
        0x9d, 0x2c, 0xda, 0xa0, 0xdf, 0xd9, 0xfa, 0xdb, 0x2d, 0xf8, 0xd8, 0xa8, 0x50, 0xda, 0xa0, 0xd0,
        0xde, 0xd9, 0xd0, 0xf8, 0xf8, 0xf8, 0xdb, 0x55, 0xf8, 0xd8, 0xa8, 0x78, 0xda, 0xa0, 0xd0, 0xdf,
        /* bank # 8 */
        0xd9, 0xd0, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xdb, 0x7d, 0xf8, 0xd8, 0x9c, 0xa8, 0x8c, 0xf5, 0x30,
        0xdb, 0x38, 0xd9, 0xd0, 0xde, 0xdf, 0xa0, 0xd0, 0xde, 0xdf, 0xd8, 0xa8, 0x48, 0xdb, 0x58, 0xd9,
        0xdf, 0xd0, 0xde, 0xa0, 0xdf, 0xd0, 0xde, 0xd8, 0xa8, 0x68, 0xdb, 0x70, 0xd9, 0xdf, 0xdf, 0xa0,
        0xdf, 0xdf, 0xd8, 0xf1, 0xa8, 0x88, 0x90, 0x2c, 0x54, 0x7c, 0x98, 0xa8, 0xd0, 0x5c, 0x38, 0xd1,
        0xda, 0xf2, 0xae, 0x8c, 0xdf, 0xf9, 0xd8, 0xb0, 0x87, 0xa8, 0xc1, 0xc1, 0xb1, 0x88, 0xa8, 0xc6,
        0xf9, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8,
        0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xf7, 0x8d, 0x9d, 0xad, 0xf8, 0x18, 0xda,
        0xf2, 0xae, 0xdf, 0xd8, 0xf7, 0xad, 0xfa, 0x30, 0xd9, 0xa4, 0xde, 0xf9, 0xd8, 0xf2, 0xae, 0xde,
        0xfa, 0xf9, 0x83, 0xa7, 0xd9, 0xc3, 0xc5, 0xc7, 0xf1, 0x88, 0x9b, 0xa7, 0x7a, 0xad, 0xf7, 0xde,
        0xdf, 0xa4, 0xf8, 0x84, 0x94, 0x08, 0xa7, 0x97, 0xf3, 0x00, 0xae, 0xf2, 0x98, 0x19, 0xa4, 0x88,
        0xc6, 0xa3, 0x94, 0x88, 0xf6, 0x32, 0xdf, 0xf2, 0x83, 0x93, 0xdb, 0x09, 0xd9, 0xf2, 0xaa, 0xdf,
        0xd8, 0xd8, 0xae, 0xf8, 0xf9, 0xd1, 0xda, 0xf3, 0xa4, 0xde, 0xa7, 0xf1, 0x88, 0x9b, 0x7a, 0xd8,
        0xf3, 0x84, 0x94, 0xae, 0x19, 0xf9, 0xda, 0xaa, 0xf1, 0xdf, 0xd8, 0xa8, 0x81, 0xc0, 0xc3, 0xc5,
        0xc7, 0xa3, 0x92, 0x83, 0xf6, 0x28, 0xad, 0xde, 0xd9, 0xf8, 0xd8, 0xa3, 0x50, 0xad, 0xd9, 0xf8,
        0xd8, 0xa3, 0x78, 0xad, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa1, 0xda, 0xde, 0xc3, 0xc5, 0xc7,
        0xd8, 0xa1, 0x81, 0x94, 0xf8, 0x18, 0xf2, 0xb0, 0x89, 0xac, 0xc3, 0xc5, 0xc7, 0xf1, 0xd8, 0xb8,
        /* bank # 9 */
        0xb4, 0xb0, 0x97, 0x86, 0xa8, 0x31, 0x9b, 0x06, 0x99, 0x07, 0xab, 0x97, 0x28, 0x88, 0x9b, 0xf0,
        0x0c, 0x20, 0x14, 0x40, 0xb0, 0xb4, 0xb8, 0xf0, 0xa8, 0x8a, 0x9a, 0x28, 0x50, 0x78, 0xb7, 0x9b,
        0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xf1, 0xbb, 0xab,
        0x88, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0xb3, 0x8b, 0xb8, 0xa8, 0x04, 0x28, 0x50, 0x78, 0xf1, 0xb0,
        0x88, 0xb4, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xbb, 0xab, 0xb3, 0x8b, 0x02, 0x26, 0x46, 0x66, 0xb0,
        0xb8, 0xf0, 0x8a, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x8b, 0x29, 0x51, 0x79, 0x8a, 0x24, 0x70, 0x59,
        0x8b, 0x20, 0x58, 0x71, 0x8a, 0x44, 0x69, 0x38, 0x8b, 0x39, 0x40, 0x68, 0x8a, 0x64, 0x48, 0x31,
        0x8b, 0x30, 0x49, 0x60, 0x88, 0xf1, 0xac, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0x8c, 0xa8, 0x04, 0x28,
        0x50, 0x78, 0xf1, 0x88, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xac, 0x8c, 0x02, 0x26, 0x46, 0x66, 0xf0,
        0x89, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xa9,
        0x88, 0x09, 0x20, 0x59, 0x70, 0xab, 0x11, 0x38, 0x40, 0x69, 0xa8, 0x19, 0x31, 0x48, 0x60, 0x8c,
        0xa8, 0x3c, 0x41, 0x5c, 0x20, 0x7c, 0x00, 0xf1, 0x87, 0x98, 0x19, 0x86, 0xa8, 0x6e, 0x76, 0x7e,
        0xa9, 0x99, 0x88, 0x2d, 0x55, 0x7d, 0xd8, 0xb1, 0xb5, 0xb9, 0xa3, 0xdf, 0xdf, 0xdf, 0xae, 0xd0,
        0xdf, 0xaa, 0xd0, 0xde, 0xf2, 0xab, 0xf8, 0xf9, 0xd9, 0xb0, 0x87, 0xc4, 0xaa, 0xf1, 0xdf, 0xdf,
        0xbb, 0xaf, 0xdf, 0xdf, 0xb9, 0xd8, 0xb1, 0xf1, 0xa3, 0x97, 0x8e, 0x60, 0xdf, 0xb0, 0x84, 0xf2,
        0xc8, 0xf8, 0xf9, 0xd9, 0xde, 0xd8, 0x93, 0x85, 0xf1, 0x4a, 0xb1, 0x83, 0xa3, 0x08, 0xb5, 0x83,
        /* bank # 10 */
        0x9a, 0x08, 0x10, 0xb7, 0x9f, 0x10, 0xd8, 0xf1, 0xb0, 0xba, 0xae, 0xb0, 0x8a, 0xc2, 0xb2, 0xb6,
        0x8e, 0x9e, 0xf1, 0xfb, 0xd9, 0xf4, 0x1d, 0xd8, 0xf9, 0xd9, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad,
        0x61, 0xd9, 0xae, 0xfb, 0xd8, 0xf4, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad, 0x19, 0xd9, 0xae, 0xfb,
        0xdf, 0xd8, 0xf4, 0x16, 0xf1, 0xd8, 0xf8, 0xad, 0x8d, 0x61, 0xd9, 0xf4, 0xf4, 0xac, 0xf5, 0x9c,
        0x9c, 0x8d, 0xdf, 0x2b, 0xba, 0xb6, 0xae, 0xfa, 0xf8, 0xf4, 0x0b, 0xd8, 0xf1, 0xae, 0xd0, 0xf8,
        0xad, 0x51, 0xda, 0xae, 0xfa, 0xf8, 0xf1, 0xd8, 0xb9, 0xb1, 0xb6, 0xa3, 0x83, 0x9c, 0x08, 0xb9,
        0xb1, 0x83, 0x9a, 0xb5, 0xaa, 0xc0, 0xfd, 0x30, 0x83, 0xb7, 0x9f, 0x10, 0xb5, 0x8b, 0x93, 0xf2,
        0x02, 0x02, 0xd1, 0xab, 0xda, 0xde, 0xd8, 0xf1, 0xb0, 0x80, 0xba, 0xab, 0xc0, 0xc3, 0xb2, 0x84,
        0xc1, 0xc3, 0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9, 0xab, 0xde, 0xb0,
        0x87, 0x9c, 0xb9, 0xa3, 0xdd, 0xf1, 0xb3, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xb0, 0x87, 0xa3, 0xa3,
        0xa3, 0xa3, 0xb2, 0x8b, 0xb6, 0x9b, 0xf2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
        0xa3, 0xf1, 0xb0, 0x87, 0xb5, 0x9a, 0xa3, 0xf3, 0x9b, 0xa3, 0xa3, 0xdc, 0xba, 0xac, 0xdf, 0xb9,
        0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
        0xd8, 0xd8, 0xd8, 0xbb, 0xb3, 0xb7, 0xf1, 0xaa, 0xf9, 0xda, 0xff, 0xd9, 0x80, 0x9a, 0xaa, 0x28,
        0xb4, 0x80, 0x98, 0xa7, 0x20, 0xb7, 0x97, 0x87, 0xa8, 0x66, 0x88, 0xf0, 0x79, 0x51, 0xf1, 0x90,
        0x2c, 0x87, 0x0c, 0xa7, 0x81, 0x97, 0x62, 0x93, 0xf0, 0x71, 0x71, 0x60, 0x85, 0x94, 0x01, 0x29,
        /* bank # 11 */
        0x51, 0x79, 0x90, 0xa5, 0xf1, 0x28, 0x4c, 0x6c, 0x87, 0x0c, 0x95, 0x18, 0x85, 0x78, 0xa3, 0x83,
        0x90, 0x28, 0x4c, 0x6c, 0x88, 0x6c, 0xd8, 0xf3, 0xa2, 0x82, 0x00, 0xf2, 0x10, 0xa8, 0x92, 0x19,
        0x80, 0xa2, 0xf2, 0xd9, 0x26, 0xd8, 0xf1, 0x88, 0xa8, 0x4d, 0xd9, 0x48, 0xd8, 0x96, 0xa8, 0x39,
        0x80, 0xd9, 0x3c, 0xd8, 0x95, 0x80, 0xa8, 0x39, 0xa6, 0x86, 0x98, 0xd9, 0x2c, 0xda, 0x87, 0xa7,
        0x2c, 0xd8, 0xa8, 0x89, 0x95, 0x19, 0xa9, 0x80, 0xd9, 0x38, 0xd8, 0xa8, 0x89, 0x39, 0xa9, 0x80,
        0xda, 0x3c, 0xd8, 0xa8, 0x2e, 0xa8, 0x39, 0x90, 0xd9, 0x0c, 0xd8, 0xa8, 0x95, 0x31, 0x98, 0xd9,
        0x0c, 0xd8, 0xa8, 0x09, 0xd9, 0xff, 0xd8, 0x01, 0xda, 0xff, 0xd8, 0x95, 0x39, 0xa9, 0xda, 0x26,
        0xff, 0xd8, 0x90, 0xa8, 0x0d, 0x89, 0x99, 0xa8, 0x10, 0x80, 0x98, 0x21, 0xda, 0x2e, 0xd8, 0x89,
        0x99, 0xa8, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x86, 0x96, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8,
        0x87, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x82, 0x92, 0xf3, 0x41, 0x80, 0xf1, 0xd9, 0x2e, 0xd8,
        0xa8, 0x82, 0xf3, 0x19, 0x80, 0xf1, 0xd9, 0x2e, 0xd8, 0x82, 0xac, 0xf3, 0xc0, 0xa2, 0x80, 0x22,
        0xf1, 0xa6, 0x2e, 0xa7, 0x2e, 0xa9, 0x22, 0x98, 0xa8, 0x29, 0xda, 0xac, 0xde, 0xff, 0xd8, 0xa2,
        0xf2, 0x2a, 0xf1, 0xa9, 0x2e, 0x82, 0x92, 0xa8, 0xf2, 0x31, 0x80, 0xa6, 0x96, 0xf1, 0xd9, 0x00,
        0xac, 0x8c, 0x9c, 0x0c, 0x30, 0xac, 0xde, 0xd0, 0xde, 0xff, 0xd8, 0x8c, 0x9c, 0xac, 0xd0, 0x10,
        0xac, 0xde, 0x80, 0x92, 0xa2, 0xf2, 0x4c, 0x82, 0xa8, 0xf1, 0xca, 0xf2, 0x35, 0xf1, 0x96, 0x88,
        0xa6, 0xd9, 0x00, 0xd8, 0xf1, 0xff
};



#endif //PIONEER_MPU6050_H
//TODO: Compass Function
//TODO: Interrupt Processing